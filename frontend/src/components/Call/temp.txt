import { useCallback, useEffect, useRef, useState } from "react";
import { useSocket } from "../../context/SocketProvider";
import peer from "../../service/peer";

export default function Call() {
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const localStreamRef = useRef(null);

  const socket = useSocket();
  const [remoteSocketId, setRemoteSocketId] = useState(null);

  const handleUserJoined = useCallback(({ email, id }) => {
    console.log(`User with email:${email} joined room. Socket ID: ${id}`);
    setRemoteSocketId(id);
  }, []);

  const handleIncomingCall = useCallback(
    async ({ from, offer }) => {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true,
      });

      localStreamRef.current = stream;

      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      stream.getTracks().forEach((track) => {
        peer.peer.addTrack(track, stream);
      });

      const ans = await peer.getAnswer(offer);
      socket.emit("call:accepted", { to: from, ans });
    },
    [socket]
  );

  const handleCallAccepted = useCallback(async ({ ans }) => {
    await peer.setRemoteAns(ans);
  }, []);

  useEffect(() => {
    socket.on("user:joined", handleUserJoined);
    socket.on("incoming:call", handleIncomingCall);
    socket.on("call:accepted", handleCallAccepted);

    return () => {
      socket.off("user:joined", handleUserJoined);
      socket.off("incoming:call", handleIncomingCall);
      socket.off("call:accepted", handleCallAccepted);
    };
  }, [socket, handleUserJoined, handleIncomingCall, handleCallAccepted]);

  useEffect(() => {
    (async () => {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true,
      });
      localStreamRef.current = stream;
      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      stream.getTracks().forEach((track) => {
        peer.peer.addTrack(track, stream);
      });
    })();
  }, []);

  useEffect(() => {
    if (remoteSocketId && localStreamRef.current) {
      (async () => {
        const offer = await peer.getOffer();
        socket.emit("user:call", { to: remoteSocketId, offer });
      })();
    }
  }, [remoteSocketId, socket]);

  useEffect(() => {
    peer.onTrack((stream) => {
      if (remoteVideoRef.current) {
        remoteVideoRef.current.srcObject = stream;
      }
    });
  }, []);

  return (
    <div className="relative flex items-center justify-center w-full h-screen">
      <video
        ref={remoteVideoRef}
        className="absolute left-0 top-0 h-full w-full object-cover"
        autoPlay
        playsInline
      />

      <video
        ref={localVideoRef}
        className="absolute bottom-5 right-5 h-32 w-32 rounded-lg border-2 border-gray-400 shadow-lg scale-x-[-1]"
        autoPlay
        playsInline
        muted
      />

      <div className="absolute bottom-5 left-1/2 flex -translate-x-1/2 space-x-4">
        <button className="rounded-full bg-gray-700 p-3 text-white transition hover:bg-gray-600">
          🎙️
        </button>
        <button className="rounded-full bg-gray-700 p-3 text-white transition hover:bg-gray-600">
          📽️
        </button>
        <button className="rounded-full bg-red-600 p-3 transition hover:bg-red-500">
          📞
        </button>
      </div>
    </div>
  );
}
